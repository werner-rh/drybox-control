/***
 * Project: DryBox Control
 * File   : HeatingData.h
 * Author : Werner Riemann 
 * Created: 08.05.2024
 * Board: Arduino Nano
 * 
 * Description: Implementation of Class HeatingData
 *              Class for handling the values for heating power and heater fan speed
 *              depending on the different temperature ranges
 * 
 */

#include "HeatingData.h"

HeatingData::HeatingData()
{

}


/***
* Setup all values needed to controll heater power, heater fan speed and ventilation speed.
* 
  we are using the same variables for each temperature range. But depending which range, 
  they are populated with the appropriate values.

  The method is initializing following member variables. All values, except compareOffset, compareOffsetTurboMode and airExtractionTime, 
  are percentage values for the PWM to power heater or fan. compareOffset and compareOffsetTurboMode are float temperature
  value in degree celsius.

  uint8_t rampUpHeatPWM[3]            - ramp values will be generated by software on calling SetupHeatingValues
  uint8_t defaultHeaterPWM            - final value to power the heater during drying
  uint8_t defaultHeaterFanPWM         - final value to power the heater fan during drying
  uint8_t nearDestHeaterPWM           - power value for heater near before destination temperature
  uint8_t lowHeaterFanPWM             - heater fan power value, when destinatiion temp is reached and heater is switched off
  uint8_t turboHeaterPWM              - power value for heater turbo mode for quicker heat up
  uint8_t turboHeaterFanPWM           - power value for heater fan turbo mode for quicker heat up
  float compareOffset                 - value below destination temperature, when heater is switched to a lower power
  float compareOffsetTurboMode        - value below destination temperature, when heater is switched to default power
  uint8_t ventilationHeaterPWM        - power value for heater during ventilation
  uint8_t ventilationHeaterFanPWM     - power value for heater fan during ventilation
  uint8_t ventilationFanPWM           - power value for ventilation fan during ventilation
  uint8_t airExtractionTime;          - air extraction time in seconds, done in intervalls during drying process
  uint8_t finalAirExtractionTime      - final air extraction time in seconds after finishing drying process
  uint8_t airExchangeIntervallMinutes - air exchange intervall in minutes
*/
void HeatingData::SetupHeatingValues(int dryDestTemp)
{

  ventilationFanPWM = 80;       // for the ventilation fan we only need one value for all
  airExtractionTime = 20;
  finalAirExtractionTime = 30;
  airExchangeIntervallMinutes = 5;    // don't set this value less then 4
  
  /*-- range up to 32 degree celsius -- */
  if(dryDestTemp <= 32) {
    defaultHeaterPWM = 72;
    defaultHeaterFanPWM = 72;
    nearDestHeaterPWM = 44;
    lowHeaterFanPWM = 32; 
    turboHeaterPWM = 92;
    turboHeaterFanPWM = 90;
    compareOffset = 0.5;
    compareOffsetTurboMode = 4.0;
    ventilationHeaterPWM = 40;
    ventilationHeaterFanPWM = 52;
  }

  /*-- range over 32 up to 35 degree celsius -- */
  if(dryDestTemp > 32 && dryDestTemp <= 35) {
    defaultHeaterPWM = 80;
    defaultHeaterFanPWM = 76;
    nearDestHeaterPWM = 58;
    lowHeaterFanPWM = 34; 
    turboHeaterPWM = 94;
    turboHeaterFanPWM = 90;
    compareOffset = 0.5;
    compareOffsetTurboMode = 4.0;
    ventilationHeaterPWM = 46; //
    ventilationHeaterFanPWM = 54;
  }

  /*-- range over 35 up to 40 degree celsius -- */
  if(dryDestTemp > 35 && dryDestTemp <= 40) {
    defaultHeaterPWM = 88;
    defaultHeaterFanPWM = 78;
    nearDestHeaterPWM = 62;
    lowHeaterFanPWM = 40; 
    turboHeaterPWM = 98;
    turboHeaterFanPWM = 90;
    compareOffset = 0.3;
    compareOffsetTurboMode = 3.0;
    ventilationHeaterPWM = 54;
    ventilationHeaterFanPWM = 34;
  }

  /*-- range over 40 up to 45 degree celsius -- */
  if(dryDestTemp > 40 && dryDestTemp <= 45) {
    defaultHeaterPWM = 88;
    defaultHeaterFanPWM = 82;
    nearDestHeaterPWM = 66;
    lowHeaterFanPWM = 44; 
    turboHeaterPWM = 98;
    turboHeaterFanPWM = 90;
    compareOffset = 0.2;
    compareOffsetTurboMode = 2.0;
    ventilationHeaterPWM = 60; // 56
    ventilationHeaterFanPWM = 40;
  }

  /*-- range over 45 up to 50 degree celsius -- */
  if(dryDestTemp > 45 && dryDestTemp <= 50) {
    defaultHeaterPWM = 96;
    defaultHeaterFanPWM = 86;
    nearDestHeaterPWM = 72;
    lowHeaterFanPWM = 50; 
    turboHeaterPWM = 98;
    turboHeaterFanPWM = 90;
    compareOffset = 0.2;
    compareOffsetTurboMode = 2.0;
    ventilationHeaterPWM = 70;
    ventilationHeaterFanPWM = 40;
  }

  /*-- range over 50 degree celsius -- */
  if(dryDestTemp > 50 ) {
    defaultHeaterPWM = 99;    // 98
    defaultHeaterFanPWM = 89; // 88
    nearDestHeaterPWM = 75;
    lowHeaterFanPWM = 60; 
    turboHeaterPWM = 99;
    turboHeaterFanPWM = 90;
    compareOffset = 0.2;
    compareOffsetTurboMode = 2.0;
    ventilationHeaterPWM = 78;    // 75
    ventilationHeaterFanPWM = 50;
  }

  // setup the ramp
  rampUpHeatPWM[0] = (defaultHeaterPWM /4);
  rampUpHeatPWM[1] = (defaultHeaterPWM /4) * 2;
  rampUpHeatPWM[2] = (defaultHeaterPWM /4) * 3;
}
